/*
 * =====================================================================================
 *
 *       Filename:  constants.h
 *
 *    Description:  This holds a lot of the constants used in the chess engine. 
 *    			Theres a lot of them because having a bunch of stuff precalculated
 *    			makes the program run a lot faster. I probably will never notice the
 *    			speed increase but all the lines and lines of hex stuff look cool.
 *
 *        Version:  1.0
 *        Created:  09/14/2012 03:46:23 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  John Finn (JF), johnvincentfinn@gmail.com
 *   Organization:  
 *
 * =====================================================================================
 */

#include <inttypes.h>

// TODO change these to use the enum
#define PAWN_LAYER    0
#define ROOK_LAYER    1
#define BISCHOP_LAYER 2
#define KNIGHT_LAYER  3
#define KING_LAYER    4
#define QUEEN_LAYER   5

enum layers {
    pawn_layer,    // 0
    rook_layer,    // 1
    bischop_layer, // 2
    knight_layer,  // 3
    king_layer,    // 4
    queen_layer,   // 5
};

enum pieces {
    black_pawn,     // 0
    black_rook,     // 1
    black_bischops, // 2
    black_knights,  // 3
    black_king,     // 4
    black_queen,    // 5
    white_pawn,     // 6
    white_rook,     // 7
    white_bischops, // 8
    white_knights,  // 9
    white_king,     // 10
    white_queen,    // 11
};

#define BLACK_OFFSET 0
#define WHITE_OFFSET 6

// TODO use an enum
#define BLACK 0
#define WHITE 1

// TODO change these to use the enum
#define BLACK_PAWN     BLACK_OFFSET + PAWN_LAYER
#define BLACK_ROOK     BLACK_OFFSET + ROOK_LAYER
#define BLACK_BISCHOPS BLACK_OFFSET + BISCHOP_LAYER
#define BLACK_KNIGHTS  BLACK_OFFSET + KNIGHT_LAYER
#define BLACK_KING     BLACK_OFFSET + KING_LAYER
#define BLACK_QUEEN    BLACK_OFFSET + QUEEN_LAYER

#define WHITE_PAWN     WHITE_OFFSET + PAWN_LAYER
#define WHITE_ROOK     WHITE_OFFSET + ROOK_LAYER
#define WHITE_BISCHOPS WHITE_OFFSET + BISCHOP_LAYER
#define WHITE_KNIGHTS  WHITE_OFFSET + KNIGHT_LAYER
#define WHITE_KING     WHITE_OFFSET + KING_LAYER
#define WHITE_QUEEN    WHITE_OFFSET + QUEEN_LAYER

char piece_symbols[] = {
'P',
'R',
'B',
'N',
'K',
'Q',
};

const char *piece_name[] = {
"BLACK_PAWN",
"BLACK_ROOK",
"BLACK_BISCHOPS",
"BLACK_KNIGHTS",
"BLACK_KING",
"BLACK_QUEEN",
"WHITE_PAWN",
"WHITE_ROOK",
"WHITE_BISCHOPS",
"WHITE_KNIGHTS",
"WHITE_KING",
"WHITE_QUEEN",
};

const uint64_t initial_black_pawns    = 0x00FF000000000000;
const uint64_t initial_black_rooks    = 0x8100000000000000;
const uint64_t initial_black_bischops = 0x2400000000000000;
const uint64_t initial_black_knights  = 0x4200000000000000;
const uint64_t initial_black_king     = 0x0800000000000000;
const uint64_t initial_black_queen    = 0x1000000000000000;

const uint64_t initial_white_pawns    = 0x000000000000FF00;
const uint64_t initial_white_rooks    = 0x0000000000000081;
const uint64_t initial_white_bischops = 0x0000000000000024;
const uint64_t initial_white_knights  = 0x0000000000000042;
const uint64_t initial_white_king     = 0x0000000000000008;
const uint64_t initial_white_queen    = 0x0000000000000010;

const uint64_t file[8] = {
0x0101010101010101,
0x0202020202020202,
0x0404040404040404,
0x0808080808080808,
0x1010101010101010,
0x2020202020202020,
0x4040404040404040,
0x8080808080808080,
};

const uint64_t rank[8] = {
0x00000000000000FF,
0x000000000000FF00,
0x0000000000FF0000,
0x00000000FF000000,
0x000000FF00000000,
0x0000FF0000000000,
0x00FF000000000000,
0xFF00000000000000,
};

const uint64_t diagnol[8] = {
0x00000000000000FF,
0x000000000000FF00,
0x0000000000FF0000,
0x00000000FF000000,
0x000000FF00000000,
0x0000FF0000000000,
0x00FF000000000000,
0xFF00000000000000,
};

const uint64_t antidiagnol[8] = {
0x00000000000000FF,
0x000000000000FF00,
0x0000000000FF0000,
0x00000000FF000000,
0x000000FF00000000,
0x0000FF0000000000,
0x00FF000000000000,
0xFF00000000000000,
};

const uint64_t king_movement[8][8] = {
{ 0x0000000000000382, 0x0000000000038283, 0x0000000003828380, 0x0000000382838000, 0x0000038283800000, 0x0003828380000000, 0x0382838000000000, 0x8283800000000000, },
{ 0x0000000000000705, 0x0000000000070507, 0x0000000007050700, 0x0000000705070000, 0x0000070507000000, 0x0007050700000000, 0x0705070000000000, 0x0507000000000000, },
{ 0x0000000000000E0A, 0x00000000000E0A0E, 0x000000000E0A0E00, 0x0000000E0A0E0000, 0x00000E0A0E000000, 0x000E0A0E00000000, 0x0E0A0E0000000000, 0x0A0E000000000000, },
{ 0x0000000000001C14, 0x00000000001C141C, 0x000000001C141C00, 0x0000001C141C0000, 0x00001C141C000000, 0x001C141C00000000, 0x1C141C0000000000, 0x141C000000000000, },
{ 0x0000000000003828, 0x0000000000382838, 0x0000000038283800, 0x0000003828380000, 0x0000382838000000, 0x0038283800000000, 0x3828380000000000, 0x2838000000000000, },
{ 0x0000000000007050, 0x0000000000705070, 0x0000000070507000, 0x0000007050700000, 0x0000705070000000, 0x0070507000000000, 0x7050700000000000, 0x5070000000000000, },
{ 0x000000000000E0A0, 0x0000000000E0A0E0, 0x00000000E0A0E000, 0x000000E0A0E00000, 0x0000E0A0E0000000, 0x00E0A0E000000000, 0xE0A0E00000000000, 0xA0E0000000000000, },
{ 0x000000000001C141, 0x0000000001C141C0, 0x00000001C141C000, 0x000001C141C00000, 0x0001C141C0000000, 0x01C141C000000000, 0xC141C00000000000, 0x41C0000000000000, },
};

const uint64_t knight_movement[8][8] = {
{ 0x0000000000020400, 0x0000000002040004, 0x0000000204000402, 0x0000020400040200, 0x0002040004020000, 0x0204000402000000, 0x0400040200000000, 0x0004020000000000, },
{ 0x0000000000050800, 0x0000000005080008, 0x0000000508000805, 0x0000050800080500, 0x0005080008050000, 0x0508000805000000, 0x0800080500000000, 0x0008050000000000, },
{ 0x00000000000A1100, 0x000000000A110011, 0x0000000A1100110A, 0x00000A1100110A00, 0x000A1100110A0000, 0x0A1100110A000000, 0x1100110A00000000, 0x00110A0000000000, },
{ 0x0000000000142200, 0x0000000014220022, 0x0000001422002214, 0x0000142200221400, 0x0014220022140000, 0x1422002214000000, 0x2200221400000000, 0x0022140000000000, },
{ 0x0000000000284400, 0x0000000028440044, 0x0000002844004428, 0x0000284400442800, 0x0028440044280000, 0x2844004428000000, 0x4400442800000000, 0x0044280000000000, },
{ 0x0000000000508800, 0x0000000050880088, 0x0000005088008850, 0x0000508800885000, 0x0050880088500000, 0x5088008850000000, 0x8800885000000000, 0x0088500000000000, },
{ 0x0000000000A01000, 0x00000000A0100010, 0x000000A0100010A0, 0x0000A0100010A000, 0x00A0100010A00000, 0xA0100010A0000000, 0x100010A000000000, 0x0010A00000000000, },
{ 0x0000000000402000, 0x0000000040200020, 0x0000004020002040, 0x0000402000204000, 0x0040200020400000, 0x4020002040000000, 0x2000204000000000, 0x0020400000000000, },
};

const uint64_t coord_table[8][8] = {
{ 0x0000000000000001, 0x0000000000000100, 0x0000000000010000, 0x0000000001000000, 0x0000000100000000, 0x0000010000000000, 0x0001000000000000, 0x0100000000000000, },
{ 0x0000000000000002, 0x0000000000000200, 0x0000000000020000, 0x0000000002000000, 0x0000000200000000, 0x0000020000000000, 0x0002000000000000, 0x0200000000000000, },
{ 0x0000000000000004, 0x0000000000000400, 0x0000000000040000, 0x0000000004000000, 0x0000000400000000, 0x0000040000000000, 0x0004000000000000, 0x0400000000000000, },
{ 0x0000000000000008, 0x0000000000000800, 0x0000000000080000, 0x0000000008000000, 0x0000000800000000, 0x0000080000000000, 0x0008000000000000, 0x0800000000000000, },
{ 0x0000000000000010, 0x0000000000001000, 0x0000000000100000, 0x0000000010000000, 0x0000001000000000, 0x0000100000000000, 0x0010000000000000, 0x1000000000000000, },
{ 0x0000000000000020, 0x0000000000002000, 0x0000000000200000, 0x0000000020000000, 0x0000002000000000, 0x0000200000000000, 0x0020000000000000, 0x2000000000000000, },
{ 0x0000000000000040, 0x0000000000004000, 0x0000000000400000, 0x0000000040000000, 0x0000004000000000, 0x0000400000000000, 0x0040000000000000, 0x4000000000000000, },
{ 0x0000000000000080, 0x0000000000008000, 0x0000000000800000, 0x0000000080000000, 0x0000008000000000, 0x0000800000000000, 0x0080000000000000, 0x8000000000000000, },
};

#define ROOK_MOVEMENT( x, y )    ( file[x] | rank[y] )
#define BISCHOP_MOVEMENT( x, y ) ( diagnol[x] | antidiagnol[y] )
#define QUEEN_MOVEMENT( x, y )   ( file[x] | rank[y] | diagnol[x] | antidiagnol[y] )
#define KNIGHT_MOVEMENT( x, y )  ( knight_movement[x][y] )
#define KING_MOVEMENT( x, y )    ( king_movement[x][y] )


const uint64_t black_squares = 0xAA55AA55AA55AA55;
const uint64_t white_squares = 0x55AA55AA55AA55AA;
const uint64_t universe      = 0xFFFFFFFFFFFFFFFF;
const uint64_t empty         = 0x0000000000000000;

// errors
enum errors {
	no_error,
	err_bad_coords,
	err_no_piece,
};

#define ERR_BAD_COORDS 1
#define ERR_NO_PIECE   2

struct error_code {
	int error_num;
	char error_name[80];

};

